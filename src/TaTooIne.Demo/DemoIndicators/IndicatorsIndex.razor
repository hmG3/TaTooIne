@using TALib
@inject IJSRuntime JsRuntime

<nav id="docs-nav" class="docs-nav">
    <div id="docs-nav-inside" class="sticky">
        <button id="docs-nav-toggle" class="docs-nav-toggle" @onclick="ToggleNavMenuAsync">
            Indicators Index
            <span class="icon-angle-right" aria-hidden="true"></span>
        </button>
        <div class="docs-toc-wrap">
            <ul id="docs-toc" class="docs-toc">
                @for (var i = 0; i < _groups.Capacity; i++)
                {
                    var closureI = i;
                    <li class="toc-item has-children @NavMenuCssClass(closureI)">
                        <button type="button" class="button-icon" @onclick="() => ToggleActive(closureI)">
                            @_groups[i].Key
                        </button>
                        <button type="button" class="submenu-toggle" @onclick="() => ToggleActive(closureI)">
                            <span class="screen-reader-text">Submenu</span>
                            <span class="icon-angle-right" aria-hidden="true"></span>
                        </button>
                        <ul class="toc-submenu">
                            @foreach (var ind in _groups[i])
                            {
                                <li class="toc-item">
                                    <button type="button" class="button-icon" @onclick="() => OnIndicatorSelect.InvokeAsync(ind)" @onclick:stopPropagation="true">
                                        @ind.Name
                                    </button>
                                </li>
                            }
                        </ul>
                    </li>
                }
            </ul>
        </div>
    </div>
</nav>

@code {
    private bool _navMenuOpened;
    private List<IGrouping<string, Function>> _groups;
    private int ActiveGroupId { get; set; } = -1;

    [Parameter] public EventCallback<Function> OnIndicatorSelect { get; set; }

    protected override void OnInitialized()
    {
        _groups = new Functions().GroupBy(f => f.Group).ToList();
    }

    private string NavMenuCssClass(int groupId) => ActiveGroupId == groupId ? "active" : null;

    private void ToggleActive(int groupId) => ActiveGroupId = ActiveGroupId == groupId ? -1 : groupId;

    private async Task ToggleNavMenuAsync()
    {
        _navMenuOpened = !_navMenuOpened;
        await JsRuntime.InvokeVoidAsync("SiteJsInterop.collapseNavMenu", _navMenuOpened, "toc");
    }
}
